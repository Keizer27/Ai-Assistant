import { auth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from "../../firebase-config.js";

// Shared auth functions
document.addEventListener('DOMContentLoaded', () => {
  // Handle login button if on login page
  const loginBtn = document.getElementById('login-btn');
  if (loginBtn) {
    loginBtn.addEventListener('click', login);
  }

  // Handle signup link if on login page
  const signupLink = document.getElementById('signup-link');
  if (signupLink) {
    signupLink.addEventListener('click', (e) => {
      e.preventDefault();
      toggleSignup();
    });
  }

  // Handle logout button if on dashboard
  const logoutBtn = document.getElementById('logout-btn');
  if (logoutBtn) {
    logoutBtn.addEventListener('click', logout);
  }

  // Check auth state
  onAuthStateChanged(auth, (user) => {
    if (user && window.location.pathname.endsWith('index.html')) {
      window.location.href = 'dashboard.html';
    }
    if (!user && window.location.pathname.endsWith('dashboard.html')) {
      window.location.href = 'index.html';
    }
  });
});

async function login() {
  const email = document.getElementById('email').value;
  const password = document.getElementById('password').value;
  
  try {
    await signInWithEmailAndPassword(auth, email, password);
  } catch (error) {
    showError(error.message);
  }
}

async function toggleSignup() {
  const email = document.getElementById('email').value;
  const password = document.getElementById('password').value;
  
  try {
    await createUserWithEmailAndPassword(auth, email, password);
    await login();
  } catch (error) {
    showError(error.message);
  }
}

async function logout() {
  try {
    await signOut(auth);
  } catch (error) {
    console.error('Logout error:', error);
  }
}

function showError(message) {
  const errorElement = document.getElementById('error-msg');
  if (errorElement) {
    errorElement.textContent = message;
    setTimeout(() => {
      errorElement.textContent = '';
    }, 5000);
  }
}
